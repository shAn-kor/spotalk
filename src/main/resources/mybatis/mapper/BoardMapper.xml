<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	모든 내용은 mapper 폴더 안으로 들어감
	namespace 에는 구현인터페이스의 풀경로가 들어감
	id 속성은 인터페이스의 함수명이 들어감
	resultType 속성은 반환 받을 타입이 들어감(string, int, double, dto풀경로)
	; 찍지 않음
	마이바티스의 매개변수는 일단 꼭 1개여야만 함
	parameterType에는 매개변수의 타입이 들어감(string, int, double, dto풀경로)
	단 parameterType은 생략가능
	?값 == #{DTO의 getter명}(대소문자 구분함)
	?가 단일값인 경우는 #{매개변수명}
-->
<mapper namespace="com.myweb.board.model.BoardMapper">

<insert id="insertPost" parameterType="com.myweb.board.model.BoardDTO">
	INSERT INTO POSTS(post_id, user_id, category, post_title, post_content, grade_id) 
	VALUES(post_seq.nextval, #{userId}, #{category}, #{postTitle}, #{postContent}, #{gradeId})
</insert>
<select id="getPostId" parameterType="string" resultType="string">
	SELECT MAX(POST_ID) FROM POSTS WHERE USER_ID = #{userId} 
</select>
<select id="getPost" parameterType="string" resultType="com.myweb.board.model.BoardDTO">
	SELECT * FROM POSTS WHERE POST_ID = #{postId}
</select>	

 <select id="getPosts" parameterType="com.myweb.board.model.BoardCheck" resultType="com.myweb.board.model.BoardDTO">
	SELECT *
	FROM (
	    SELECT p.*, 
	           COALESCE(c.comment_count, 0) AS comment_count
	           
	           <if test="order == 최신순">
	           	
	           </if>
	           
	           <if test="order == '인기순' ">
	           ,ROW_NUMBER() OVER (ORDER BY (p.post_like - p.post_dislike + COALESCE(c.comment_count, 0)) DESC) AS rn
			    FROM POSTS p
			    LEFT JOIN (
			        SELECT post_id, COUNT(*) AS comment_count
			        FROM COMMENTS
			        GROUP BY post_id
			    ) c ON p.post_id = c.post_id
	           </if>
	           
	           <if test="category == '조회순' ">
	           ,ROW_NUMBER() OVER (ORDER BY #{order} DESC, p.post_id) AS rn
	           </if>
	           
	           <if test="dto에getter == '~~~' ">
	           ,ROW_NUMBER() OVER (ORDER BY #{order} DESC, p.post_id) AS rn
	           </if>
	           
	           
	           
	    FROM POSTS p
	    LEFT JOIN (
	        SELECT post_id, COUNT(*) AS comment_count
	        FROM COMMENTS
	        GROUP BY post_id
	    ) c ON p.post_id = c.post_id
	    where
	) 
	WHERE rn BETWEEN #{params.offset} AND #{params.offset} + #{params.limit} - 1
</select>

<select id="getAnnPosts" parameterType="map" resultType="com.myweb.board.model.BoardDTO">
	SELECT * FROM (
	SELECT POSTS.*, ROW_NUMBER() OVER (#{order}) AS rn
	FROM POSTS WHERE CATEGORY = '공지사항'
	) WHERE rn BETWEEN #{params.offset} AND #{params.offset} + #{params.limit} - 1
</select>
<select id="getSoccerPosts" parameterType="map" resultType="com.myweb.board.model.BoardDTO">
	SELECT * FROM (
	SELECT POSTS.*, ROW_NUMBER() OVER (#{order}) AS rn
	FROM POSTS WHERE CATEGORY = '축구'
	) WHERE rn BETWEEN #{params.offset} AND #{params.offset} + #{params.limit} - 1
</select>
<select id="getBaseballPosts" parameterType="map" resultType="com.myweb.board.model.BoardDTO">
	SELECT * FROM (
	SELECT POSTS.*, ROW_NUMBER() OVER (#{order}) AS rn
	FROM POSTS WHERE CATEGORY = '야구'
	) WHERE rn BETWEEN #{params.offset} AND #{params.offset} + #{params.limit} - 1
								 <!-- 한 페이지에 표시할 글 수 -->
</select>
<select id="getBasketballPosts" parameterType="map" resultType="com.myweb.board.model.BoardDTO">
	SELECT * FROM (
	SELECT POSTS.*, ROW_NUMBER() OVER (#{order}) AS rn
	FROM POSTS WHERE CATEGORY = '농구'
	) WHERE rn BETWEEN #{params.offset} AND #{params.offset} + #{params.limit} - 1
</select>

    
<select id="getTotalPosts" resultType="int">
	SELECT COUNT(*) FROM POSTS
</select>


</mapper>